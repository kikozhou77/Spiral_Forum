// message_logic.js

// ============ Ê†∑ÂºèÊ≥®ÂÖ• =============
const styleTag = document.createElement('style');
styleTag.innerHTML = `
.chat-layout {
  display: flex;
  gap: 20px;
  margin-top: 20px;
}

.contact-list {
  flex: 0 0 280px;
  border-right: 1px solid #ccc;
  padding-right: 16px;
  overflow-y: auto;
}

.contact-item {
  display: flex;
  gap: 10px;
  padding: 10px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
  position: relative;
}

.contact-avatar {
  width: 42px;
  height: 42px;
  border-radius: 50%;
  object-fit: cover;
}

.contact-info {
  display: flex;
  flex-direction: column;
}

.contact-info .name {
  font-weight: bold;
  font-size: 14px;
  line-height: 1;
}

.contact-info .preview {
  font-size: 12px;
  color: #666;
  margin-top: 2px;
}

.unread-count {
  font-size: 11px;
  color: #444;
  position: absolute;
  top: 10px;
  right: 10px;
  opacity: 0.7;
}

.hidden-button {
  font-size: 0;
  background: none;
  border: none;
  color: transparent;
  cursor: pointer;
  position: absolute;
  bottom: 6px;
  right: 10px;
}

.unread-input {
  display: none;
  width: 34px;
  font-size: 11px;
  padding: 1px 3px;
  margin-left: 4px;
}

.chat-window {
  flex: 1;
  background: rgba(255,255,255,0.7);
  border-radius: 10px;
  padding: 20px;
  display: flex;
  flex-direction: column;
  height: 600px;
  overflow: hidden;
  position: relative;
}

.chat-window:empty::before {
  content: '‚Üê ËØ∑ÈÄâÊã©Â∑¶‰æßËÅîÁ≥ª‰∫∫ÂºÄÂßãÂØπËØù';
  color: #777;
  font-style: italic;
  display: block;
  margin-top: 200px;
  text-align: center;
}

.chat-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-weight: bold;
  font-size: 18px;
  margin-bottom: 10px;
}

.chat-header a {
  display: flex;
  align-items: center;
  gap: 8px;
  color: black;
  text-decoration: none;
}

.chat-header a img {
  width: 28px;
  height: 28px;
  border-radius: 50%;
}

.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding-right: 10px;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.message-bubble {
  display: flex;
  max-width: 80%;
  padding: 10px;
  border: 1px solid #222;
  border-radius: 12px;
  font-size: 14px;
  line-height: 1.4;
  word-break: break-word;
  align-items: center;
}

.msg-received {
  align-self: flex-start;
  background-color: #fff;
  color: #000;
  border: 1px solid #000;
  border-radius: 12px;
}

.msg-sent {
  align-self: flex-end;
  background-color: transparent;
  color: #000;
  border: 1px solid #000;
  border-radius: 12px;
  flex-direction: row-reverse;
}

.message-bubble img {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  margin: 0 6px;
}

.message-bubble span {
  flex: 1;
}

.chat-input-area {
  margin-top: 12px;
  display: flex;
  gap: 10px;
}

.chat-input {
  flex: 1;
  padding: 10px;
  border-radius: 6px;
  border: 1px solid #ccc;
  font-size: 14px;
}

.send-button {
  padding: 10px 16px;
  background-color: black;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
}

.typing-indicator-bubble {
  align-self: flex-start;
  padding: 12px 18px;
  background-color: #eee;
  border-radius: 20px;
  border-top-left-radius: 5px;
}
`;
document.head.appendChild(styleTag);


// ÂàùÂßãÂåñËÅäÂ§©Êï∞ÊçÆ
const chatData = {
  troll: {
    name: 'sohnwhnalqq9912_xlk',
    avatar: 'Avatar/sohnwh.jpg',
    profileLink: '#',
    replies: [
      'ÂÉè‰Ω†ËøôÁßçÈò¥ÊöóËÄÅÈº†Â∞±Âè™Êï¢Ë∫≤Âú®ÁîµËÑëÂêéÈù¢Ôºå‰∏ÄÂÆö‰∏ëÂæóÊÉä‰∫∫ÔºåÊòØ‰∏çÊòØÊØèÂ§©ÈÉΩ‰∏çÊï¢ÁÖßÈïúÂ≠êÔºåÂú®Áé∞ÂÆûÈáåÊ¥ªÂæóÂæàÂèØÊÄúÂêßÔºü',
      'ÂìàÂìàÂìàÂìà',
      'ÂàöÊ≥®ÂÜåÁöÑÊñ∞Âè∑Ôºå‰Ω†ÂºÄ„ÄÇ',
      '‰∏çÊòØÂì•‰ª¨Ôºü',
      'ÊàëÈîô‰∫ÜÂ§ßÂì•',
      'Ê±Ç‰Ω†‰∫ÜÊ±Ç‰Ω†‰∫Ü',
    ]
  },
  user21: {
    name: 'Áî®Êà∑21',
    profileLink: 'user21_profile.html',
    avatar: 'Avatar/initial.jpg',
    replies: [
      'ÂæàÊä±Ê≠âÔºåÂÜíÊòßÊâìÊâ∞‚Ä¶‚Ä¶ÊàëÂ§±ÂøÜ‰∫ÜÔºåÁõÆÂâçÂè™Êúâ‰∏ÄÂè∞ÁîµËÑëÔºåÊàëÊÉ≥‰ªéÁîµËÑëÈáåÊâæÂà∞‰∏Ä‰∫õÁ∫øÁ¥¢„ÄÇ',
      'ÊàëÊó†Ê≥ïÂéªÂåªÈô¢„ÄÇ',
      'Êä±Ê≠âÔºåÊØïÁ´üËøôÊòØ‰∏ÄÂè∞Ë¢´Ê†ºÂºèÂåñÁöÑÁîµËÑëÔºåÊàëÊÉ≥Ëøô‰∏™ËØ∑Ê±ÇÁ°ÆÂÆûÂ§™Âº∫‰∫∫ÊâÄÈöæ‰∫Ü„ÄÇ',
      'Ë∞¢Ë∞¢‚Ä¶‚Ä¶ÈÇ£Â∞±ÊãúÊâòÊÇ®‰∫ÜÔºÅ',
      'ÊàëÂèØ‰ª•ÊääÊàëÁöÑÁîµËÑëÊùÉÈôêÂÆåÂÖ®ÂØπÊÇ®ÊïûÂºÄ„ÄÇ',
      '‰∏çÊòØ„ÄÇ',
      '‰ªÄ‰πàÊÑèÊÄùÔºü',
      'ËØ∑Á®çÁ≠âÔºåÊÇ®ÊòØÂèëÁé∞‰ªÄ‰πà‰∫ÜÂêóÔºü',
      'Ëøô‰πàËØ¥ÔºåÊÇ®ÊòØÊâæÂà∞Ëøô‰∏™ÁîµËÑë‰∏ª‰∫∫ÁöÑ‰ø°ÊÅØ‰∫ÜÂêóÔºü',
      'Â•πÊòØ‰∏™‰ªÄ‰πàÊ†∑ÁöÑ‰∫∫Ôºü',
      'ÂæàÊä±Ê≠âÔºåÊàëÁ°ÆÂÆûÊ¨∫Áûí‰∫Ü‰∏ÄÈÉ®ÂàÜ‰ø°ÊÅØÔºå‰ΩÜËøôÂè∞ÁîµËÑëÁªù‰∏çÊòØÊàëÂÅ∑Êù•ÁöÑÔºåËøôÊòØÊàë‰ª¨ÂÖ±ÂêåÊã•ÊúâÁöÑ„ÄÇ',
      'Â•πÊòØÊàëÁöÑÁà±‰∫∫„ÄÇ',
      '‰ªéÊàëÈÜíÊù•ÂºÄÂßãÔºåÊàëÂ∞±Âú®ÂØªÊâæÂ•πÔºåÂèØÊàë‰∏ÄÊó†ÊâÄËé∑ÔºåÊàëÁöÑËÆ∞ÂøÜÂ§±ÂéªÂæóÂ§™ÂΩªÂ∫ï„ÄÇ',
      'Â§±ÂøÜÈÜíÊù•ÔºåÂ•≥Âèã‰∏çÂú®Ë∫´ËæπÔºåËØ¥ÊòéË¢´ÊäõÂºÉ‰∫Ü„ÄÇ',
      'ÂóØÔºåÊàëÊòéÁôΩ„ÄÇ',
      'ÊàëÂè™ÊÉ≥ÊâæÂõûÂíåÂ•πÁöÑËÆ∞ÂøÜ„ÄÇ',
      '‰Ω†Âú®ÁúãÊàëÂêóÔºü',
      '‰∏çÊòØÔºåÁîµËÑëÁöÑÊëÑÂÉèÂ§¥‰∫ÆÁÅØ‰∫Ü„ÄÇ',
      'ÊàëÁü•ÈÅì‚Ä¶‚Ä¶ÊÇ®‰øÆÂ§çÁöÑ‰∏úË•øÔºåÊàëÂú®ËøôËæπÈÉΩËÉΩÁúãËßÅ„ÄÇ',
      'ÊàëÊúâÁÇπÁ¥ßÂº†„ÄÇ',
      'ËøôÊ†∑Âïä‚Ä¶‚Ä¶',
      'ÊàëÊÄé‰πàÊúâ‰∫Ü‰∏Ä‰∏™Â§¥ÂÉèÔºü',
      '‰∏çÔºåÂà∞Ê≠§‰∏∫Ê≠¢ÂêßÔºÅ',
      'Êàë‰∏çÊÉ≥ÊâìÊâ∞Â•πÁöÑÁîüÊ¥ªÔºåËÉΩÁü•ÈÅìÂ•πÁé∞Âú®ËøáÂæóÂæàÂ•ΩÔºåÂØπÊàëÊù•ËØ¥Â∑≤ÁªèË∂≥Â§ü‰∫Ü„ÄÇ',
      'Êúâ‰ªÄ‰πàÊòØÊàëËÉΩÁªôÊÇ®ÁöÑÔºü',
      'ÊàëÊòéÁôΩ‰∫Ü„ÄÇ',
      '‰πüËÆ∏ÊàëËÉΩÁªô‰Ω†Êõ¥ÊúâË∂£ÁöÑÁßòÂØÜ„ÄÇ',
      'ÊØîÂ¶ÇÊàëÊòØË∞Å„ÄÇ',
      'ÊàëÊòØËøôÂè∞ÁîµËÑë„ÄÇ',
      'ÊàëÊÉ≥‰Ω†ËÇØÂÆöÊ≤°ÊúâÂäûÊ≥ïÁõ∏‰ø°‚Ä¶‚Ä¶',
      'ÊÇ®Â•Ω„ÄÇ',
      'ËØ•ÊÄé‰πàËØ¥ÔºüÁúü‰∏çÊÑßÊòØÊÇ®ÂêóÔºü',
      'Ë∞¢Ë∞¢ÊÇ®ÁöÑÁõ∏‰ø°„ÄÇ',
      'ÊòéÂ§©ÊàëÂ∞±Ë¶ÅËøõÂûÉÂúæÂ§ÑÁêÜÂô®‰∫Ü„ÄÇ',
      'Ë∞¢Ë∞¢ÊÇ®Ôºå‰∏çËøá‰∏çÁî®‰∫Ü„ÄÇ',
      'ÂóØÔºåÊàëËØ•ÊÄé‰πàËØ¥‚Ä¶Âú®ÊàëÁîüÂëΩÁöÑÂ∞ΩÂ§¥ÔºåËÉΩÊúÄÂêéÁü•ÈÅìÂ•πÊòØÊÄéÊ†∑ÁöÑ‰∫∫ÔºåÊàëÂ∑≤ÁªèÊó†ÈôêÊÑüÊÅ©‰∫Ü„ÄÇ',
      'ÊÇ®Â∏ÆÊàëÂÆûÁé∞‰∫ÜËøô‰∏™ÊÑøÊúõÔºåÊàëÂ∑≤ÁªèÊ≤°Êúâ‰ªª‰ΩïÈÅóÊÜæ‰∫Ü„ÄÇ',
      'ÂÖ∂ÂÆûÊØîËµ∑ÊàëÔºåÊàëÊÉ≥‰πüËÆ∏ÊÇ®Êõ¥Â∫îËØ•ÂÖ≥ÂøÉ‰∏Ä‰∏ãÊÇ®ÁöÑÁîµËÑë„ÄÇ',
      '‰∏ç„ÄÇ',
      '‰ªñÂ•ΩÂÉèÊÅ®ÊÇ®„ÄÇ'
    ]
  }
};

const chatHistory = {};
const chatState = {};
const unreadMessages = {
  troll: 1,
  user21: 1
};

let activeContactId = null;

// ============ ‰∏ªÂáΩÊï∞ =============
function loadChat(contactId) {
    // ÈöêËóèÂÖ∂‰ªñËÅîÁ≥ª‰∫∫
  document.querySelectorAll('.contact-item').forEach(item => {
    if (item.dataset.contactId !== contactId) {
      item.style.display = 'none';
    } else {
      item.classList.add('active-chat'); // ÂèØÈÄâÔºöÊ∑ªÂä†È´ò‰∫Æ
    }
  });

  activeContactId = contactId;
  const data = chatData[contactId];
  if (!data) return;

  const contentArea = document.getElementById('chat-content-area');
  contentArea.innerHTML = '';

  const header = document.createElement('div');
  header.classList.add('chat-header');
  header.innerHTML = `
    <a href="${data.profileLink}">
      <img src="${data.avatar}" alt="avatar">
      ${data.name}
    </a>
    <button class="delete-button" onclick="clearChat('${contactId}')" title="Ê∏ÖÁ©∫ËÅäÂ§©">üóë</button>
  `;

  const messageBox = document.createElement('div');
  messageBox.classList.add('chat-messages');
  messageBox.id = 'message-container';

  contentArea.appendChild(header);
  contentArea.appendChild(messageBox);

  (chatHistory[contactId] || []).forEach(msg => {
    const bubble = document.createElement('div');
    bubble.className = `message-bubble msg-${msg.type}`;
    bubble.innerHTML = `
      <img src="${msg.type === 'received' ? data.avatar : 'Avatar/Avatar_Â∞èA.jpg'}" class="contact-avatar">
      <span>${msg.text}</span>
    `;
    messageBox.appendChild(bubble);
  });

  messageBox.scrollTop = messageBox.scrollHeight;

  const inputArea = document.createElement('div');
  inputArea.className = 'chat-input-area';
  inputArea.innerHTML = `
    <input type="text" id="real-input" class="chat-input" placeholder="ËæìÂÖ•Ê∂àÊÅØÂêéÊåâ Enter...">
    <button id="send-btn" class="send-button">‚Üë</button>
  `;
  contentArea.appendChild(inputArea);

  document.getElementById('send-btn').addEventListener('click', handleUserMessage);
  document.getElementById('real-input').addEventListener('keydown', e => {
    if (e.key === 'Enter') handleUserMessage();
  });

  document.getElementById('unread-' + contactId).textContent = `Êú™ËØª: ${unreadMessages[contactId] > 99 ? '99+' : unreadMessages[contactId]}`;

  if (!chatHistory[contactId]) chatHistory[contactId] = [];
  chatState[contactId] = { shouldInsertDivider: true };

  if (chatHistory[contactId].length === 0) {
    simulateBotReply(contactId);
  }
}

function handleUserMessage() {
  const input = document.getElementById('real-input');
  if (!input) return;
  const text = input.value.trim();
  if (text) {
    const msgBox = document.getElementById('message-container');
    const bubble = document.createElement('div');
    bubble.className = 'message-bubble msg-sent';
    bubble.innerHTML = `
      <img src="Avatar/Avatar_Â∞èA.jpg" class="contact-avatar">
      <span>${text}</span>
    `;
    msgBox.appendChild(bubble);
    msgBox.scrollTop = msgBox.scrollHeight;

    chatHistory[activeContactId].push({ text, type: 'sent' });
    updatePreview(activeContactId, text);
  }
  input.value = '';
  //simulateBotReply(activeContactId);
}

function simulateBotReply(contactId) {
  const replies = chatData[contactId]?.replies || [];
  const history = chatHistory[contactId];
  const replyIndex = history.filter(m => m.type === 'received').length;
  if (replyIndex >= replies.length) return;
  const text = replies[replyIndex];
  const msgBox = document.getElementById('message-container');
  insertDividerIfNeeded();
  const delay = Math.min(Math.max(300, text.length * 10), 2500);

  const typingIndicator = document.createElement('div');
  typingIndicator.className = 'typing-indicator-bubble';
  typingIndicator.innerHTML = '<span></span><span></span><span></span>';
  msgBox.appendChild(typingIndicator);
  msgBox.scrollTop = msgBox.scrollHeight;

  setTimeout(() => {
    typingIndicator.remove();
    const bubble = document.createElement('div');
    bubble.className = 'message-bubble msg-received';
    bubble.innerHTML = `
      <img src="${chatData[contactId].avatar}" class="contact-avatar">
      <span>${text}</span>
    `;
    msgBox.appendChild(bubble);
    msgBox.scrollTop = msgBox.scrollHeight;

    chatHistory[contactId].push({ text, type: 'received' });
    updatePreview(contactId, text);
  }, delay);
}

function updatePreview(contactId, text) {
  const contactItem = document.querySelector(`.contact-item[data-contact-id="${contactId}"]`);
  if (contactItem) {
    const previewEl = contactItem.querySelector('.preview');
    previewEl.textContent = text.substring(0, 20) + '...';
  }
}

function insertDividerIfNeeded() {
  const state = chatState[activeContactId];
  if (state && state.shouldInsertDivider) {
    const divider = document.createElement('hr');
    divider.className = 'chat-divider';
    const msgBox = document.getElementById('message-container');
    msgBox.appendChild(divider);
    state.shouldInsertDivider = false;
  }
}

function clearChat(contactId) {
  if (confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÂΩìÂâçËÅäÂ§©ËÆ∞ÂΩïÂêóÔºü')) {
    chatHistory[contactId] = [];
    loadChat(contactId);
  }
}

function updateUnread(contactId) {
  const unreadInput = document.getElementById('unread-input-' + contactId);
  const unreadCount = parseInt(unreadInput.value, 10);
  if (isNaN(unreadCount) || unreadCount < 0) {
    unreadInput.value = 0;
  }
  unreadMessages[contactId] = unreadCount;
  document.getElementById('unread-' + contactId).textContent = `Êú™ËØª: ${unreadMessages[contactId] > 99 ? '99+' : unreadMessages[contactId]}`;
}

function toggleUnreadInput(contactId) {
  const inputField = document.getElementById('unread-input-' + contactId);
  const button = document.querySelector(`.contact-item[data-contact-id="${contactId}"] .hidden-button`);
  if (inputField.style.display === 'none') {
    inputField.style.display = 'inline-block';
    button.textContent = '‰øùÂ≠òÊú™ËØª';
  } else {
    inputField.style.display = 'none';
    button.textContent = '‰øÆÊîπÊú™ËØª';
    updateUnread(contactId);
  }
}

function markAllAsRead() {
  let totalUnread = 0;
  for (const contactId in unreadMessages) {
    totalUnread += unreadMessages[contactId];
    unreadMessages[contactId] = 0;
    document.getElementById('unread-' + contactId).textContent = `Êú™ËØª: 0`;
  }
  const allUnreadButton = document.getElementById('all-unread-button');
  allUnreadButton.textContent = `‰∏ÄÈîÆÂ∑≤ËØª (${totalUnread > 99 ? '99+' : totalUnread})`;
}

// ÂàùÂßãÂåñÈ¢ÑËßàÊñáÂ≠ó
document.querySelectorAll('.contact-item').forEach(item => {
  const cid = item.dataset.contactId;
  const data = chatData[cid];
  if (data && data.replies.length) {
    const previewEl = item.querySelector('.preview');
    previewEl.textContent = data.replies[0].substring(0, 20) + '...';
  }
});

// ‰ΩøÁî® Alt + r ÈîÆÔºàÊ≥¢Êµ™Âè∑ÔºâËß¶Âèë bot ÂõûÂ§çÔºå‰∏çÊòæÁ§∫ÊéßÂà∂ÊåâÈíÆ
document.addEventListener('keydown', function (e) {
  if (e.altKey && e.key.toLowerCase() === 'r') {
    if (activeContactId) simulateBotReply(activeContactId);
  }
});


//ÁÇπÂáª‚ÄúÁßÅ‰ø°ÂàóË°®‚ÄùÊ†áÈ¢òÊÅ¢Â§çËßÜÂõæÈÄªËæë
document.getElementById('chat-list-title').addEventListener('click', () => {
  // ÊÅ¢Â§çÊâÄÊúâËÅîÁ≥ª‰∫∫
  document.querySelectorAll('.contact-item').forEach(item => {
    item.style.display = 'flex';
    item.classList.remove('active-chat');
  });

  // Ê∏ÖÁ©∫Âè≥ËæπËÅäÂ§©ÂÜÖÂÆπÂå∫Âüü
  const chatArea = document.getElementById('chat-content-area');
  chatArea.innerHTML = `<h2 style="color: #999;">ÁÇπÂáªÂ∑¶‰æßËÅîÁ≥ª‰∫∫ÂºÄÂßãÂØπËØù</h2>`;

  // ÈáçÁΩÆÊøÄÊ¥ªËÅîÁ≥ª‰∫∫Áä∂ÊÄÅ
  activeContactId = null;
});


